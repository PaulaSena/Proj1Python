One Day

2 Dia - Passos criar arquivo statico
 	> python ..\manage.py startapp base
2.1 Criar pasta static de FrontEnd dentro da pasta base.
 	> http://127.0.0.1:8000/static/base/index.html
2.2 Definir direção do app:
 	>Localizar arquivo Sttings.py em INSTALLED_APPS =[
 	> 'quiz.base',
2.3 Rodar novamente a aplicação.
2.4 Realizar o mapeamento do path
	 notas:Resquest Response 
2.5 Templetizar
 	> Editar arquivo views.py dentro da pasta base criada.
2.6 views.py
	 > Função 
  	 >def home(requisicao):
          pass
2.7 urls.py 
    > path('admin/', admin.site.urls),
   * path(' ', vi),  *ctrl space space.

   >import views.base
  
****
    
2.8  urls.py
    > from quiz.base import views

      urlpatterns = [
      path('admin/', admin.site.urls),
      path('', views.home),
       ]

2.9 views.py
    > from django.http import HttpResponse
     
    > def home(requisicao):
    > return HttpResponse('Olá Mundo, em Python Django - ROTA (req,rep)! ok =D ')

    >rodar servidor

2.10 views.py 
   > from django.shortcuts import render

   > def home(requisicao):
   > return render(requisicao,'base/home.html')

    
    > rodar servidor

2.11 home.html
   > <link rel="stylesheet" href="/static/base/assets/styles/app.css"/>
    
    > rodar servidor

2.12 copia o arquivo game.html de para pasta template.
    > mapeamento da urls.py
    > path('perguntas/<int:indice>', views.perguntas), *parametro<> da views

2.13 urls.py
       *Declarado o valor de parametro indice
     > def perguntas(requisicao, indice):
     > return render(requisicao,'base/game.html')

     > rodar servidor | http://127.0.0.1:8000/perguntas/1

2.14 game.html 
     * imprimido o valor das perguntas na url
     > <h2>Questão 1</h2>
     > <h2>Questão {{indice_da_questao}}</h2>

2.15 criação de contexto objeto dicionario na views.py.
     > def perguntas(requisicao, indice):
     > contexto ={'indice_da_questao': indice}
     > return render(requisicao,'base/game.html',context=contexto)
     
     >rodar servidor | http://127.0.0.1:8000/perguntas/50

feito o commit aqui tudo ok

game.html | views.py | urls.py Template com conteudo alterado pela renderização no contexto compasso.

****

2.16 copia da pag end.html para classificacao.html

2.17  edição do urls.py 
    > path('classificacao', views.classificacao),

2.18 edição do views.py
    > def classificacao(requisicao):
    > return render(requisicao,'base/classificacao.html')
    
    >rodar servidor | http://127.0.0.1:8000/classificacao

feito o commit aqui tudo ok pag classificacao.html

****

2.19 MVT model.py EDICAO do modelo model views template django
    >Criada classe com o modelo pergunta ira conectar com o banco de dados.

	*Limitar escolha com tupla.

	>from django.db import models

   class Pergunta(models.Model):
    enunciado = models.TextField()
    disponivel = models.BooleanField(default=False)
    alternativas = models.JSONField()
    alternativa_correta = models.IntegerField(choices=[
        (0, 'A'),
        (1, 'B'),
        (2, 'C'),
        (3, 'D'),
    ])
        
   >rodar servidor | http://127.0.0.1:8000/admin/
 
2.20 Acessando o python admin Interface de adm o Django | http://127.0.0.1:8000/admin/
   > Linha de comando (terminal) cd ..

2.21 Criar um super adm 
   > python manage.py createsuperuser 

2.22 Criar tabelas
   > python manage.py migrate 
   > python manage.py createsuperuser 
    > 'wedenanapaula'): admin
    > senha: admin Y

2.23 admnin.py registrar adm para a classe Pergunta associada a models.py
     from django.contrib import admin
     from quiz.base.models import Pergunta


    @admin.register(Pergunta)
    class PerguntaAdmin(admin.ModelAdmin):
    pass

 >rodar servidor | http://127.0.0.1:8000/admin/

2.24  Logar painel adm | Visualizar tabela Perguntas
2.25  Criar/Migrar tabela (Migração de dados)
     > Linha de comando (terminal) 
     > python manage.py makemigrations
     > foi criada  AUTO a pasta Migrate

2.26 Gerado o arquivo de migração para criar o bando de dados
     >python manage.py migrate
      $ Applying base.0001_initial... OK
     > rodar servidor | http://127.0.0.1:8000/admin/
2.27 Adcionar Pergunta.
    >Enunciado : 
    >Alternativas:{"array": ["function", "def", "func", "foo"]} ARQUIVO JSON

2.28 models.py  Alterar descrição da pergunta | Pergunta object (1)
    * Método dander str | boa pratica | Representação String 
    >  def __str__(self):
       return self.enunciado
2.30 admin.py Configurar a visão do ADM
    X pass
    >list_display = ('id', 'enunciado', 'disponivel')
ADD outra pergunta.

// Passar Contesto para o enunciado

2.31 game.html 
    X <h3>Qual destas palavras é uma palavra reservada em Python?</h3>
                   
    > <h3>{{pergunta.enunciado}}</h3>


2.32 views.py acessar objeto atravez da classe de modelos
    >def perguntas(requisicao, indice):
    >Pergunta.objects.filter(disponivel=True).order_by('id')[indice - 1]
criada a variavel 
>pergunta = Pergunta.objects.filter(disponivel=True).order_by('id')[indice - 1]


def perguntas(requisicao, indice):
    pergunta = Pergunta.objects.filter(disponivel=True).order_by('id')[indice - 1]
    contexto = {'indice_da_questao': indice, 'pergunta': pergunta}
    return render(requisicao,'base/game.html', context=contexto)
      

2.33 game.html passar dados do banco de dados 
 <!--  Aqui foi feito o laço de repetição substituindo as 3 divs-->
     
     >{% for alternativa in pergunta.alternativas.array %} 
    	 X<p class="choice-text">{{copy}}</p>
     ><p class="choice-text">{{alternativa}}</p>
     >{% endfor %}
Fim Aula 2 tudo ok

